{"version":3,"sources":["../../src/components/PrimaryButton.tsx"],"names":["buttonWidth","Metrics","screenWidth","newScreenHorizontalPadding","smallButtonWidth","ButtonContainer","View","props","fullWidth","section","baseMargin","Colors","primary","ButtonLabel","_Text","Fonts","size","medium","white","ButtonIcon","EvilIcon","h1","ButtonLoaderIcon","PrimaryButton","buttonLabel","customIcon","width","onClickHandler","disabled","loading","buttonColor","newBlue","buttonShadowColor","buttonStyle","labelStyle","shadowOptions","shadowContainerStyle","contentWrapperStyle","testId","disabledColor","newDimGrey","ButtonContent","Boolean","APP_CONSTANTS","PRIMARY_BUTTON_SHADOW","shadowColor","backgroundColor","borderBottomColor","bottom","height","shadowOffset","shadowOpacity","shadowRadius","elevation","borderRadius","alignItems","alignSelf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport styled from 'styled-components/native';\nimport EvilIcon from 'react-native-vector-icons/EvilIcons';\nimport * as Animatable from 'react-native-animatable';\nimport { If } from 'react-if';\nimport { propOr, prop } from 'ramda';\n\nimport { APP_CONSTANTS, Colors, Fonts, Metrics } from '../commons';\nimport { _Text } from './AppStyledComponents';\nimport BoxShadow from './BoxShadow';\n\nconst buttonWidth = Metrics.screenWidth - Metrics.newScreenHorizontalPadding * 2;\nconst smallButtonWidth = buttonWidth / 2;\ninterface ButtonContainerType {\n  fullWidth?: boolean;\n  buttonColor?: string;\n  width?: number | 'auto' | string;\n  buttonShadowColor?: string;\n}\n\nconst ButtonContainer = styled(View)<ButtonContainerType>`\n  width: ${(props) => (props.fullWidth ? buttonWidth : prop('width', props))};\n  height: ${Metrics.section * 2 - 2};\n  padding-horizontal: ${Metrics.baseMargin + 2};\n  padding-vertical: ${Metrics.baseMargin + 2};\n  border-radius: ${Metrics.baseMargin};\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  background-color: ${(props) => propOr(Colors.primary, 'buttonColor', props)};\n`;\ninterface ButtonLabelType {\n  buttonLabelColor?: string;\n}\n\nconst ButtonLabel = styled(_Text)<ButtonLabelType>`\n  font-size: ${Fonts.size.medium};\n  color: ${(props) => propOr(Colors.white, 'buttonLabelColor', props)};\n  font-family: TTCommons-DemiBold;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst ButtonIcon = styled(EvilIcon)`\n  font-size: ${Fonts.size.h1};\n  color: ${Colors.white};\n  font-weight: bold;\n  text-align: center;\n`;\nconst ButtonLoaderIcon = () => (\n  <Animatable.View iterationCount={'infinite'} animation=\"rotate\">\n    <ButtonIcon name=\"spinner-3\" />\n  </Animatable.View>\n);\n\nexport interface PrimaryButtonType {\n  buttonLabel: string;\n  buttonColor?: string;\n  buttonShadowColor?: string;\n  fullWidth?: boolean;\n  width?: number | 'auto' | string;\n  activeOpacity?: number;\n  onClickHandler(): void;\n  disabled?: boolean;\n  loading?: boolean;\n  buttonStyle?: object;\n  labelStyle?: object;\n  shadowOptions?: object;\n  shadowContainerStyle?: object;\n  contentWrapperStyle?: Object;\n  customIcon?: () => any;\n  testId?: string;\n  disabledColor?: string;\n}\nexport const PrimaryButton = (props: PrimaryButtonType) => {\n  const {\n    buttonLabel = 'Save',\n    customIcon = () => {},\n    fullWidth = false,\n    width = smallButtonWidth,\n    onClickHandler,\n    disabled = false,\n    loading = false,\n    buttonColor = Colors.newBlue,\n    buttonShadowColor,\n    buttonStyle,\n    labelStyle,\n    shadowOptions = {},\n    shadowContainerStyle = {},\n    contentWrapperStyle = {},\n    testId = '',\n    disabledColor = Colors.newDimGrey,\n  } = props;\n\n  const ButtonContent = () => {\n    return (\n      <ButtonContainer fullWidth={fullWidth} width={width} buttonColor={disabled ? disabledColor : buttonColor} buttonShadowColor={buttonShadowColor || buttonColor} style={buttonStyle}>\n        <If condition={Boolean(customIcon)}>{customIcon()}</If>\n        <If condition={loading}>\n          <ButtonLoaderIcon />\n        </If>\n        <If condition={!loading}>\n          <ButtonLabel style={labelStyle}>{buttonLabel}</ButtonLabel>\n        </If>\n      </ButtonContainer>\n    );\n  };\n\n  return (\n    <View testID={disabled ? `${testId}-disabled` : testId} accessibilityLabel={disabled ? `${testId}-disabled` : testId}>\n      <BoxShadow\n        shadowOptions={{\n          ...APP_CONSTANTS.PRIMARY_BUTTON_SHADOW,\n          shadowColor: disabled ? disabledColor : buttonColor,\n          backgroundColor: buttonColor,\n          borderBottomColor: buttonColor,\n          bottom: 4,\n          width: '0%',\n          height: 0,\n          ...shadowOptions,\n        }}\n        contentWrapperStyle={{\n          shadowColor: disabled ? disabledColor : buttonColor,\n          shadowOffset: '0px 2px',\n          shadowOpacity: 0.75,\n          shadowRadius: 2,\n          elevation: 2,\n          backgroundColor: disabled ? disabledColor : buttonColor,\n          borderRadius: 7,\n          alignItems: 'flex-end',\n          ...contentWrapperStyle,\n        }}\n        otherOptions={{\n          alignSelf: 'center',\n        }}\n        shadowContainerStyle={shadowContainerStyle}\n        onPress={onClickHandler}\n        disabled={disabled}\n      >\n        <ButtonContent />\n      </BoxShadow>\n    </View>\n  );\n};\n"],"file":"PrimaryButton.js"}